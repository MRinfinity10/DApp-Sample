{"ast":null,"code":"var _jsxFileName = \"/home/mrinfinity/solidity/project/saeid/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport erc20abi from './abi/ERC20ABI.json';\nimport react, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [Address, setAddress] = useState(null); // Connect MetaMask to Dapp\n\n  const connectWallet = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    signer.getAddress().then(result => {\n      setAddress(result);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hdmgN0YN5w0ryScbE4eTkviVTKs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mrinfinity/solidity/project/saeid/src/App.js"],"names":["erc20abi","react","useState","App","Address","setAddress","connectWallet","provider","ethers","providers","Web3Provider","window","ethereum","send","signer","getSigner","getAddress","then","result"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAWC,UAAX,IAAyBH,QAAQ,CAAC,IAAD,CAAvC,CADa,CAGX;;AACA,QAAMI,aAAa,GAAG,YAAY;AAChC,UAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAML,QAAQ,CAACM,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AAED,UAAMC,MAAM,GAAGP,QAAQ,CAACQ,SAAT,EAAf;AACCD,IAAAA,MAAM,CAACE,UAAP,GAAoBC,IAApB,CAA0BC,MAAD,IAAU;AAACb,MAAAA,UAAU,CAACa,MAAD,CAAV;AAAmB,KAAvD;AACD,GAND;;AAOF,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GAdQf,G;;KAAAA,G;AAgBT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport erc20abi from './abi/ERC20ABI.json';\nimport react , {useState} from 'react';\n\nfunction App() {\n  const [Address , setAddress] = useState(null)\n\n    // Connect MetaMask to Dapp\n    const connectWallet = async () => {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      await provider.send(\"eth_requestAccounts\", []);\n   \n     const signer = provider.getSigner();\n      signer.getAddress().then((result)=>{setAddress(result)});\n    }\n  return(\n    <div>hello</div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
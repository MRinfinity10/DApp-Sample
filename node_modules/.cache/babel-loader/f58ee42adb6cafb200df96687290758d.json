{"ast":null,"code":"var _jsxFileName = \"/home/mrinfinity/solidity/project/saeid/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport erc20abi from './abi/ERC20ABI.json';\nimport { ethers } from 'ethers';\nimport react, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport ReadFrom from './components/ReadFrom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nim;\n\nfunction App() {\n  _s();\n\n  const [Address, setAddress] = useState(null);\n  const [contractInfo, setContractInfo] = useState({\n    address: \"-\",\n    tokenName: \"-\",\n    tokenSymbol: \"-\",\n    totalSupply: \"-\"\n  });\n  const [balanceInfo, setBalanceInfo] = useState({\n    address: \"-\",\n    balance: \"-\"\n  }); // Connect MetaMask to Dapp\n\n  const connectWallet = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    signer.getAddress().then(result => {\n      setAddress(result);\n    });\n  }; // Disconnect MetaMask to Dapp\n\n\n  const disconnectWallet = () => {\n    setAddress(null);\n  }; // Handle submit button for \"read from contract\" section\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const erc20 = new ethers.Contract(data.get(\"addr\"), erc20abi, provider);\n    const tokenName = await erc20.name();\n    console.log(provider.getCode(Address));\n    const tokenSymbol = await erc20.symbol();\n    const totalSupply = await erc20.totalSupply();\n    setContractInfo({\n      address: data.get(\"addr\"),\n      tokenName,\n      tokenSymbol,\n      totalSupply\n    });\n    console.log(contractInfo);\n  }; // Getting user ballance\n\n\n  const getMyBalance = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const erc20 = new ethers.Contract(contractInfo.address, erc20abi, provider);\n    const signer = await provider.getSigner();\n    const signerAddress = await signer.getAddress();\n    const balance = await erc20.balanceOf(signerAddress);\n    setBalanceInfo({\n      address: signerAddress,\n      balance: String(balance)\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      connectWallet: connectWallet,\n      disconnectWallet: disconnectWallet,\n      Address: Address,\n      setAddress: setAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-2 md:grid-cols-2 bg-gray-800 pt-4 pb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-6\",\n        children: [/*#__PURE__*/_jsxDEV(ReadFrom, {\n          handleSubmit: handleSubmit,\n          contractInfo: contractInfo,\n          setContractInfo: setContractInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"getBalance\", {\n            getMyBalance: getMyBalance,\n            balanceInfo: balanceInfo,\n            setBalanceInfo: setBalanceInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TxList, {\n            txs: txs,\n            setTxs: setTxs\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"0aWH92F4RYtvqYwNJ8K7ECESftc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mrinfinity/solidity/project/saeid/src/App.js"],"names":["erc20abi","ethers","react","useState","Navbar","ReadFrom","im","App","Address","setAddress","contractInfo","setContractInfo","address","tokenName","tokenSymbol","totalSupply","balanceInfo","setBalanceInfo","balance","connectWallet","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","getAddress","then","result","disconnectWallet","handleSubmit","e","preventDefault","data","FormData","target","erc20","Contract","get","name","console","log","getCode","symbol","getMyBalance","signerAddress","balanceOf","String","txs","setTxs"],"mappings":"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","sourcesContent":["import './App.css';\nimport erc20abi from './abi/ERC20ABI.json';\nimport { ethers } from 'ethers';\nimport react , {useState} from 'react';\nimport Navbar from './components/Navbar'; \nimport ReadFrom from './components/ReadFrom';\nim\n\nfunction App() {\n  const [Address , setAddress] = useState(null)\n\n  const [contractInfo, setContractInfo] = useState({\n    address: \"-\",\n    tokenName: \"-\",\n    tokenSymbol: \"-\",\n    totalSupply: \"-\"\n  })\n\n  const [balanceInfo, setBalanceInfo] = useState({\n    address: \"-\",\n    balance: \"-\"\n  })\n\n  // Connect MetaMask to Dapp\n  const connectWallet = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    await provider.send(\"eth_requestAccounts\", []);\n  \n    const signer = provider.getSigner();\n    signer.getAddress().then((result)=>{setAddress(result)});\n  }\n\n  // Disconnect MetaMask to Dapp\n  const disconnectWallet = () => {\n    setAddress(null);\n  }\n\n  // Handle submit button for \"read from contract\" section\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    const erc20 = new ethers.Contract(data.get(\"addr\"), erc20abi, provider);\n\n\n    const tokenName = await erc20.name();\n    console.log(provider.getCode(Address))\n\n    const tokenSymbol = await erc20.symbol();\n    const totalSupply = await erc20.totalSupply();\n      \n\n    setContractInfo({\n      address: data.get(\"addr\"),\n      tokenName,  \n      tokenSymbol,\n      totalSupply\n    });\n\n    console.log(contractInfo);\n  }\n\n   // Getting user ballance\n   const getMyBalance = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const erc20 = new ethers.Contract(contractInfo.address, erc20abi, provider);\n    const signer = await provider.getSigner();\n    const signerAddress = await signer.getAddress();\n    const balance = await erc20.balanceOf(signerAddress);\n\n    setBalanceInfo({\n      address: signerAddress,\n      balance: String(balance)\n    });\n  };\n\n  return(\n    <>\n        <Navbar connectWallet= {connectWallet} disconnectWallet={disconnectWallet} Address={Address} setAddress={setAddress}/>\n      \n        <div className=\"grid grid-cols-1 gap-2 md:grid-cols-2 bg-gray-800 pt-4 pb-6\">\n\n          <div className = \"p-6\">\n            <ReadFrom handleSubmit={handleSubmit} contractInfo={contractInfo} setContractInfo={setContractInfo}/>\n            \n            <div>\n          <getBalance getMyBalance={getMyBalance} balanceInfo={balanceInfo} setBalanceInfo={setBalanceInfo}/>\n          <TxList txs={txs} setTxs={setTxs} />\n        </div>\n          </div>\n        </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
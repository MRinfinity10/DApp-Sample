{"ast":null,"code":"var _jsxFileName = \"/home/mrinfinity/solidity/project/saeid/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport erc20abi from './abi/ERC20ABI.json';\nimport { ethers } from 'ethers';\nimport react, { useState, useEffect } from 'react';\nimport Navbar from './components/Navbar';\nimport ReadFrom from './components/ReadFrom';\nimport GetBalance from './components/GetBalance';\nimport WriteForm from './components/WriteFrom';\nimport TxList from './components/TxList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [txs, setTxs] = useState([]);\n  const [contractListened, setContractListened] = useState();\n  const [Address, setAddress] = useState(null);\n  const [contractInfo, setContractInfo] = useState({\n    address: \"-\",\n    tokenName: \"-\",\n    tokenSymbol: \"-\",\n    totalSupply: \"-\"\n  });\n  const [balanceInfo, setBalanceInfo] = useState({\n    address: \"-\",\n    balance: \"-\"\n  }); // Connect MetaMask to Dapp\n\n  const connectWallet = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    signer.getAddress().then(result => {\n      setAddress(result);\n    });\n  }; // Disconnect MetaMask to Dapp\n\n\n  const disconnectWallet = () => {\n    setAddress(null);\n  }; // Handle submit button for \"read from contract\" section\n\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const erc20 = new ethers.Contract(data.get(\"addr\"), erc20abi, provider);\n    const tokenName = await erc20.name();\n    console.log(provider.getCode(Address));\n    const tokenSymbol = await erc20.symbol();\n    const totalSupply = await erc20.totalSupply();\n    setContractInfo({\n      address: data.get(\"addr\"),\n      tokenName,\n      tokenSymbol,\n      totalSupply\n    });\n    console.log(contractInfo);\n  }; // Getting user ballance\n\n\n  const getMyBalance = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const erc20 = new ethers.Contract(contractInfo.address, erc20abi, provider);\n    const signer = await provider.getSigner();\n    const signerAddress = await signer.getAddress();\n    const balance = await erc20.balanceOf(signerAddress);\n    setBalanceInfo({\n      address: signerAddress,\n      balance: String(balance)\n    });\n  }; //Handling transfer tokens in dapp (Write)\n\n\n  const handleTransfer = async e => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n    const erc20 = new ethers.Contract(contractInfo.address, erc20abi, signer);\n    await erc20.transfer(data.get(\"recipient\"), data.get(\"amount\"));\n  }; //useEffect for listening to events in smart contract and return them in TxList component :0\n\n\n  useEffect(() => {\n    if (contractInfo.address !== \"-\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const erc20 = new ethers.Contract(contractInfo.address, erc20abi, provider);\n      erc20.on(\"Transfer\", (from, to, amount, event) => {\n        console.log({\n          from,\n          to,\n          amount,\n          event\n        });\n        setTxs(currentTxs => [...currentTxs, {\n          txHash: event.transactionHash,\n          from,\n          to,\n          amount: String(amount)\n        }]);\n      });\n      setContractListened(erc20);\n      return () => {\n        contractListened.removeAllListeners();\n      };\n    }\n  }, [contractInfo.address]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      connectWallet: connectWallet,\n      disconnectWallet: disconnectWallet,\n      Address: Address,\n      setAddress: setAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-2 md:grid-cols-2 bg-gray-800 pt-4 pb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-6\",\n        children: [/*#__PURE__*/_jsxDEV(ReadFrom, {\n          handleSubmit: handleSubmit,\n          contractInfo: contractInfo,\n          setContractInfo: setContractInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(WriteForm, {\n          handleTransfer: handleTransfer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(GetBalance, {\n          getMyBalance: getMyBalance,\n          balanceInfo: balanceInfo,\n          setBalanceInfo: setBalanceInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TxList, {\n          txs: txs,\n          setTxs: setTxs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"DODzwKScG0/8wrOW4iVPBWww+z8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mrinfinity/solidity/project/saeid/src/App.js"],"names":["erc20abi","ethers","react","useState","useEffect","Navbar","ReadFrom","GetBalance","WriteForm","TxList","App","txs","setTxs","contractListened","setContractListened","Address","setAddress","contractInfo","setContractInfo","address","tokenName","tokenSymbol","totalSupply","balanceInfo","setBalanceInfo","balance","connectWallet","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","getAddress","then","result","disconnectWallet","handleSubmit","e","preventDefault","data","FormData","target","erc20","Contract","get","name","console","log","getCode","symbol","getMyBalance","signerAddress","balanceOf","String","handleTransfer","transfer","on","from","to","amount","event","currentTxs","txHash","transactionHash","removeAllListeners"],"mappings":"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","sourcesContent":["import './App.css';\nimport erc20abi from './abi/ERC20ABI.json';\nimport { ethers } from 'ethers';\nimport react , {useState, useEffect} from 'react';\nimport Navbar from './components/Navbar'; \nimport ReadFrom from './components/ReadFrom';\nimport GetBalance from './components/GetBalance';\nimport WriteForm from './components/WriteFrom';\nimport TxList from './components/TxList';\n\nfunction App() {\n  const [txs, setTxs] = useState([]);\n  const [contractListened, setContractListened] = useState();\n  const [Address , setAddress] = useState(null)\n\n  const [contractInfo, setContractInfo] = useState({\n    address: \"-\",\n    tokenName: \"-\",\n    tokenSymbol: \"-\",\n    totalSupply: \"-\"\n  })\n\n  const [balanceInfo, setBalanceInfo] = useState({\n    address: \"-\",\n    balance: \"-\"\n  })\n\n  // Connect MetaMask to Dapp\n  const connectWallet = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    await provider.send(\"eth_requestAccounts\", []);\n  \n    const signer = provider.getSigner();\n    signer.getAddress().then((result)=>{setAddress(result)});\n  }\n\n  // Disconnect MetaMask to Dapp\n  const disconnectWallet = () => {\n    setAddress(null);\n  }\n\n  // Handle submit button for \"read from contract\" section\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    const erc20 = new ethers.Contract(data.get(\"addr\"), erc20abi, provider);\n\n\n    const tokenName = await erc20.name();\n    console.log(provider.getCode(Address))\n\n    const tokenSymbol = await erc20.symbol();\n    const totalSupply = await erc20.totalSupply();\n      \n\n    setContractInfo({\n      address: data.get(\"addr\"),\n      tokenName,  \n      tokenSymbol,\n      totalSupply\n    });\n\n    console.log(contractInfo);\n  }\n\n   // Getting user ballance\n   const getMyBalance = async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const erc20 = new ethers.Contract(contractInfo.address, erc20abi, provider);\n    const signer = await provider.getSigner();\n    const signerAddress = await signer.getAddress();\n    const balance = await erc20.balanceOf(signerAddress);\n\n    setBalanceInfo({\n      address: signerAddress,\n      balance: String(balance)\n    });\n  };\n\n  //Handling transfer tokens in dapp (Write)\n  const handleTransfer = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n    const erc20 = new ethers.Contract(contractInfo.address, erc20abi, signer);\n    await erc20.transfer(data.get(\"recipient\"), data.get(\"amount\"));\n  }\n\n   //useEffect for listening to events in smart contract and return them in TxList component :0\n   useEffect(() => {\n    if (contractInfo.address !== \"-\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const erc20 = new ethers.Contract(\n        contractInfo.address,\n        erc20abi,\n        provider\n      );\n\n      erc20.on(\"Transfer\", (from, to, amount, event) => {\n        console.log({ from, to, amount, event });\n\n        setTxs((currentTxs) => [\n          ...currentTxs,\n          {\n            txHash: event.transactionHash,\n            from,\n            to,\n            amount: String(amount)\n          }\n        ]);\n      });\n      setContractListened(erc20);\n\n\n      return () => {\n        contractListened.removeAllListeners();\n      };\n    }\n  }, [contractInfo.address]);\n    \n  return(\n    <>\n        <Navbar connectWallet= {connectWallet} disconnectWallet={disconnectWallet} Address={Address} setAddress={setAddress}/>\n      \n        <div className=\"grid grid-cols-1 gap-2 md:grid-cols-2 bg-gray-800 pt-4 pb-6\">\n\n          <div className = \"p-6\">\n            <ReadFrom handleSubmit={handleSubmit} contractInfo={contractInfo} setContractInfo={setContractInfo}/>\n            <WriteForm handleTransfer={handleTransfer} />\n            </div>\n          \n          <div>\n            <GetBalance getMyBalance={getMyBalance} balanceInfo={balanceInfo} setBalanceInfo={setBalanceInfo}/>\n            <TxList txs={txs} setTxs={setTxs} />\n          </div>\n        </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}